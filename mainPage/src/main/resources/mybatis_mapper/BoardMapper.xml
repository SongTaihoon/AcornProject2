<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.mainPage.mapper.BoardMapper">
	<resultMap type="Board" id="BoardMap">
		<id column="board_no" property="board_no"/>
		<result column="title" property="title"/>
		<result column="contents" property="contents"/>
		<result column="post_time" property="post_time"/>
		<result column="prefer_good" property="good"/>
		<result column="prefer_bad" property="bad"/>
		<result column="prefer_active" property="prefer_active"/>
		<result column="replys_size" property="replys_size"/>
		<result column="views" property="views"/>
		<!-- Board : UsersDto = N : 1   -->	
		<association property="user" javaType="UserDto" foreignColumn="user_id">
			<id column="user_id" property="user_id"/>
			<result column="user_name" property="user_name"/>
			<result column="user_email" property="user_email"/>
		</association>
		<association property="category" javaType="Category" foreignColumn="category_id">
				<id column="category_id" property="category_id"/>
				<result column="category_name" property="category_name"/>
		</association>
		<!-- Board : Reply = 1 : N  -->
		<collection property="replys" javaType="java.util.ArrayList" ofType="Reply">
			<id column="reply_no" property="reply_no"/>
			<result column="reply_title" property="title"/>
			<result column="reply_contents" property="contents"/>
			<result column="reply_post_time" property="post_time"/>
			<result column="reply_img_path" property="img_path"/>
			<result column="reply_good" property="good"/>
			<result column="reply_bad" property="bad"/>
			<!-- Reply : UsersDto = N : 1 -->
				<association property="user" javaType="UserDto">
					<id column="reply_user_id" property="user_id"/>
 					<result column="reply_user_name" property="user_name"/>
				</association>
				<collection property="good_prefers" ofType="ReplyPrefer" javaType="java.util.ArrayList">
					<id column="rp_good_reply_prefer_no" property="reply_prefer_no"/>
					<result column="rp_good_reply_no" property="reply_no"/>
					<result column="rp_good_prefer" property="prefer"/>
					<result column="rp_good_user_id" property="user_id"/>
				</collection>
				<collection property="bad_prefers" ofType="ReplyPrefer" javaType="java.util.ArrayList">
					<id column="rp_bad_reply_prefer_no" property="reply_prefer_no"/>
					<result column="rp_bad_reply_no" property="reply_no"/>
					<result column="rp_bad_prefer" property="prefer"/>
					<result column="rp_bad_user_id" property="user_id"/>
				</collection>
		</collection>
		<collection property="boardImgs" javaType="java.util.ArrayList" ofType="BoardImg">
			<id column="iboard_img_no" property="board_img_no"/>
			<result column="iimg_path" property="img_path"/>
		</collection>
	</resultMap>
	<!-- list 페이지  -->
	<select id="selectPageAll" resultType="Board">
		SELECT
			board_no, 
			place_name,
			rating,
			title, 
			post_time, 
			contents,
			address1, 
			address2,
			address3,
			views,
			board_no boardNo,
			c.category_name,
			(SELECT COUNT(*) FROM REPLY r WHERE r.board_no = boardNo ) replys_size,
			(SELECT COUNT(*) FROM BOARD_PREFER WHERE board_no = boardNo and prefer = 1) good,
			(SELECT COUNT(*) FROM BOARD_PREFER WHERE board_no = boardNo and prefer = 0) bad,
			user_id as 'user.user_id'
			FROM BOARD
			LEFT JOIN category c using(category_id)
			ORDER BY board_no DESC
			LIMIT #{startRow}, #{pageSize}
	</select>
	<select id="selectPageAllCount" resultType="int">
		SELECT COUNT(*) FROM BOARD
	</select>
	<select id="selectDetailOneAll" resultMap="BoardMap" parameterType="int">
		SELECT b.*,
			(SELECT count(*) FROM BOARD_PREFER WHERE board_no = b.board_no AND prefer = true) prefer_good,
			(SELECT count(*) FROM BOARD_PREFER WHERE board_no = b.board_no AND prefer = false) prefer_bad,
			u.user_id, u.user_name, u.user_email,
			r.reply_no,
			r.title as reply_title, 
			r.contents as reply_contents, 
			r.post_time as reply_post_time,
			r.img_path as reply_img_path,
			r.user_id as reply_user_id, 
			
			i.board_img_no as iboard_img_no,
			i.img_path as iimg_path,
			
			c.category_name, 
		    c.category_id,
			
			rp_good.user_id 			as rp_good_user_id,
			rp_good.reply_prefer_no 	as rp_good_reply_prefer_no,
			rp_good.reply_no 			as rp_good_reply_no,
			rp_good.prefer 				as rp_good_prefer,
			
			rp_bad.user_id 				as rp_bad_user_id,
			rp_bad.reply_prefer_no 		as rp_bad_reply_prefer_no,
			rp_bad.reply_no 			as rp_bad_reply_no,
			rp_bad.prefer 				as rp_bad_prefer
			
			FROM BOARD b 
			
			INNER JOIN USER u 
			USING(user_id)
			
			LEFT JOIN BOARD_IMG i 
			USING(board_no)
			
			LEFT JOIN REPLY r 
			USING(board_no)
			
			LEFT JOIN CATEGORY c USING(category_id) 
			
			LEFT JOIN  (SELECT * FROM REPLY_PREFER WHERE prefer = true) rp_good
			ON r.reply_no = rp_good.reply_no
			
			LEFT JOIN  (SELECT * FROM REPLY_PREFER WHERE prefer = false) rp_bad
			ON r.reply_no = rp_bad.reply_no
			
			WHERE b.board_no = #{boardNo}
			ORDER BY reply_no DESC
	</select>
	<select id="selectOne" resultMap="BoardMap" parameterType="int">
		SELECT 
			b.*,
			(SELECT COUNT(*) FROM BOARD_PREFER WHERE board_no = b.board_no AND prefer = true) prefer_good,
			(SELECT COUNT(*) FROM BOARD_PREFER WHERE board_no = b.board_no AND prefer = false) prefer_bad,
			<if test="loginUsersId != null">
				(SELECT prefer FROM BOARD_PREFER WHERE board_no = b.board_no AND user_id = #{loginUsersId}) as prefer_active,
			</if>
			u.user_id, u.user_name, u.user_email, u.birth,
			
		    r.reply_no, 
		    r.title reply_title,
		    r.contents reply_contents, 
		    r.post_time reply_post_time, 
		    r.img_path reply_img_path, 
		    r.good reply_good,
		    r.bad reply_bad, 
		    r.user_id reply_user_id,
		    
		    i.board_img_no iboard_img_no,
		    i.img_path iimg_path,
		    
		    c.category_name, 
		    c.category_id,
		     
		    rp_good.user_id rp_good_user_id,
		    rp_good.reply_prefer_no rp_good_reply_prefer_no,
		    rp_good.reply_no rp_good_reply_no,
		    rp_good.prefer rp_good_prefer,
		    rp_bad.user_id rp_bad_user_id,
		    rp_bad.reply_prefer_no rp_bad_reply_prefer_no,
		    rp_bad.reply_no rp_bad_reply_no,
		    rp_bad.prefer rp_bad_prefer
		    
		    FROM BOARD b 
		    
		    INNER JOIN USER u USING(user_id) 
		    
		    LEFT JOIN BOARD_IMG i USING(board_no)
		    
		    LEFT JOIN REPLY r USING(board_no) 
	
		    LEFT JOIN CATEGORY c USING(category_id) 
		    
		    LEFT JOIN (SELECT * FROM REPLY_PREFER WHERE prefer = true) rp_good
		    ON r.reply_no = rp_good.reply_no
		    
		    LEFT JOIN (SELECT * FROM REPLY_PREFER WHERE prefer = false) rp_bad
		    ON r.reply_no = rp_bad.reply_no
		    
		    WHERE b.board_no = #{boardNo}	
	</select>
	<insert id="insertOne" parameterType="Board"
	 useGeneratedKeys="true" keyProperty="board_no">
		INSERT INTO BOARD (title, contents, user_id)
			VALUES (#{title}, #{contents}, #{user.user_id})
	</insert>
	<update id="updateOne" parameterType="Board">
		UPDATE BOARD SET 
			title = #{title},
			contents = #{contents}
				WHERE board_no = #{board_no}
	</update>
	<delete id="deleteOne" parameterType="int">
		DELETE FROM BOARD WHERE board_no = #{boardNo}
	</delete>
	<update id="detailUpdateViews" parameterType="int">
		UPDATE BOARD SET 
			views = views + 1
				WHERE board_no = #{boardNo}
	</update>
	<!-- criteria(검색조건) -->
	<sql id="criteria">
		    <trim prefix="WHERE (" suffix=")" prefixOverrides="AND">
	  		<foreach item="type" collection="typeArr">
	  			<trim prefix="AND">
	  				<choose>
	  					<when test="type == 'B'.toString()">
	  						<trim prefixOverrides="or">
			  					<foreach collection="boardArr" item="board_no">
			  						<trim prefix="or">
			  							board_no = #{board_no}
			  						</trim>
			  					</foreach>  						
	  						</trim>
	  					</when>
	  					<when test="type == 'T'.toString()">
	  						b.title LIKE CONCAT ('%', #{keyword}, '%')
	  					</when>
	  					<when test="type == 'C'.toString()">
	  						b.contents LIKE CONCAT ('%', #{keyword}, '%')
	  					</when>  					
	  					<when test="type == 'U'.toString()">
	  						u.userid LIKE CONCAT ('%', #{keyword}, '%')
	  					</when>  					
	  				</choose>
	  			</trim>
	  		</foreach>
	  	</trim>
	</sql>
	<select id="searchBoard" resultMap="BoardMap">
		SELECT b.*, u.user_id
			FROM BOARD b 
				LEFT JOIN USER u USING(user_id)
				<include refid="criteria"></include>
					ORDER BY board_no DESC 
						LIMIT #{skip}, #{amount}	
	</select>
	<select id="boardGetTotal" resultType="int">
  		SELECT COUNT(*) FROM BOARD b 
  			LEFT JOIN USER u using(user_id)
		<include refid="criteria"></include>
	</select>
	<select id="searchAllBoard" resultMap="BoardMap">
		SELECT  b.*, u.user_id
			FROM BOARD b 
				LEFT JOIN USER u USING(user_id)
					WHERE title LIKE CONCAT ('%', #{keyword}, '%') OR
						  contents LIKE CONCAT ('%', #{keyword}, '%') OR
						  u.userid LIKE CONCAT ('%', #{keyword}, '%')
							ORDER BY board_no DESC 
								LIMIT #{skip}, #{amount}	
	</select>
	<select id="boardAllGetTotal" resultType="int">
  		SELECT COUNT(*) FROM BOARD b 
  			LEFT JOIN USER u USING(user_id)
				WHERE title LIKE CONCAT ('%', #{keyword}, '%') OR
					  contents LIKE CONCAT ('%', #{keyword}, '%') OR
					  u.userid LIKE CONCAT ('%', #{keyword}, '%')
	</select>
</mapper>